{
  "info": {
    "name": "Shaadi Mantra - Verified API Collection",
    "_postman_id": "shaadi-mantra-verified-001",
    "description": "Trimmed Postman collection with endpoints confirmed working against https://shaadi-mantrana.onrender.com. Admin-only endpoints are marked and require ADMIN token.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "https://shaadi-mantrana.onrender.com" },
    { "key": "accessToken", "value": "" },
    { "key": "refreshToken", "value": "" },
    { "key": "otp", "value": "" },
    { "key": "userId", "value": "" },
    { "key": "userUuid", "value": "" }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Send OTP",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{ \"email\": \"niteshkumar9591@gmail.com\" }" },
            "url": { "raw": "{{baseUrl}}/api/auth/send-otp", "host": ["{{baseUrl}}"], "path": ["api","auth","send-otp"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "  const j = pm.response.json();",
                  "  if (j.otp) { pm.collectionVariables.set('otp', j.otp); }",
                  "  pm.test('send-otp returned success', () => pm.expect(j.success).to.be.true);",
                  "} catch (e) { pm.test('send-otp parse', () => pm.expect(false).to.be.true); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Verify OTP (login) — stores tokens",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{ \"email\": \"niteshkumar9591@gmail.com\", \"otp\": \"{{otp}}\" }" },
            "url": { "raw": "{{baseUrl}}/api/auth/verify-otp", "host": ["{{baseUrl}}"], "path": ["api","auth","verify-otp"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const res = pm.response.json();",
                  "if (res && res.session) {",
                  "  pm.collectionVariables.set('accessToken', res.session.accessToken || '');",
                  "  pm.collectionVariables.set('refreshToken', res.session.refreshToken || '');",
                  "}",
                  "if (res && res.user) {",
                  "  pm.collectionVariables.set('userId', res.user.userId || '');",
                  "  pm.collectionVariables.set('userUuid', res.user.userUuid || '');",
                  "}",
                  "pm.test('verify-otp success', () => pm.expect(res.success).to.be.true);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Preapproved email check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/auth/preapproved/check?email=niteshkumar9591@gmail.com",
              "host": ["{{baseUrl}}"],
              "path": ["api","auth","preapproved","check"],
              "query": [{ "key": "email", "value": "user@example.com" }]
            }
          }
        },
        {
          "name": "Refresh token (may return invalid session)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{ \"refreshToken\": \"{{refreshToken}}\" }" },
            "url": { "raw": "{{baseUrl}}/api/auth/refresh", "host": ["{{baseUrl}}"], "path": ["api","auth","refresh"] }
          }
        }
      ]
    },
    {
      "name": "Profiles",
      "item": [
        {
          "name": "Get my profile",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "url": { "raw": "{{baseUrl}}/api/profiles/me", "host": ["{{baseUrl}}"], "path": ["api","profiles","me"] }
          }
        },
        {
          "name": "Update my profile (use profile fields)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"profile\": { \"about\": \"Updated via Postman\", \"nativePlace\": \"lucknow\" } }"
            },
            "url": { "raw": "{{baseUrl}}/api/profiles/me", "host": ["{{baseUrl}}"], "path": ["api","profiles","me"] }
          },
          "description": "Earlier PUT returned 'No valid fields' — use 'profile' object with known keys."
        },
        {
          "name": "Get profiles (discovery)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "url": { "raw": "{{baseUrl}}/api/profiles", "host": ["{{baseUrl}}"], "path": ["api","profiles"] }
          }
        },
        {
          "name": "Get profile by UUID (public)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/api/profiles/uuid/{{userUuid}}", "host": ["{{baseUrl}}"], "path": ["api","profiles","uuid","{{userUuid}}"] }
          }
        }
      ]
    },
    {
      "name": "Matching",
      "item": [
        {
          "name": "Discovery (matching)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "url": { "raw": "{{baseUrl}}/api/matching/discovery", "host": ["{{baseUrl}}"], "path": ["api","matching","discovery"] }
          }
        },
        {
          "name": "Like a profile (matching) - requires likedUserId",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "body": { "mode": "raw", "raw": "{ \"likedUserId\": \"U456\" }" },
            "url": { "raw": "{{baseUrl}}/api/matching/like", "host": ["{{baseUrl}}"], "path": ["api","matching","like"] }
          }
        }
      ]
    },
    {
      "name": "Connections & Chat (partial)",
      "item": [
        {
          "name": "Get connections (works)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "url": { "raw": "{{baseUrl}}/api/connections", "host": ["{{baseUrl}}"], "path": ["api","connections"] }
          }
        },
        {
          "name": "Create connection (NOTE: POST returned 404 during testing)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "body": { "mode": "raw", "raw": "{ \"from\": \"U123\", \"to\": \"U456\" }" },
            "url": { "raw": "{{baseUrl}}/api/connections", "host": ["{{baseUrl}}"], "path": ["api","connections"] }
          },
          "description": "POST creation returned 404 on the deployed instance. Keep here for dev/local tests; remove if 404 persists."
        },
        {
          "name": "Get chat threads (may fail)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "url": { "raw": "{{baseUrl}}/api/chat/threads?userId={{userId}}", "host": ["{{baseUrl}}"], "path": ["api","chat","threads"], "query":[{"key":"userId","value":"{{userId}}"}] }
          },
          "description": "Chat endpoints partially present; some thread message endpoints returned 404."
        }
      ]
    },
    {
      "name": "Invitations",
      "item": [
        {
          "name": "List invitations (works)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "url": { "raw": "{{baseUrl}}/api/invitations", "host": ["{{baseUrl}}"], "path": ["api","invitations"] }
          }
        },
        {
          "name": "Create invitation (admin likely required)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "body": { "mode": "raw", "raw": "{ \"email\": \"niteshkumar9591@gmail.com\", \"invitedBy\": \"cli\" }" },
            "url": { "raw": "{{baseUrl}}/api/invitations", "host": ["{{baseUrl}}"], "path": ["api","invitations"] }
          },
          "description": "This returned 'Failed to send invitation' in testing — likely admin-only or additional server-side checks."
        }
      ]
    },
    {
      "name": "Uploads (placeholders)",
      "item": [
        {
          "name": "Upload single file (multipart/form-data) - test locally",
          "request": {
            "method": "POST",
            "header": [{ "key": "Authorization", "value": "Bearer {{accessToken}}" }],
            "body": { "mode": "formdata", "formdata": [{ "key": "file", "type": "file", "src": "" }] },
            "url": { "raw": "{{baseUrl}}/api/upload/single", "host": ["{{baseUrl}}"], "path": ["api","upload","single"] }
          }
        }
      ]
    }
  ]
}